// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// CMS tables
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  articles Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id       String        @id @default(cuid())
  name     String        @unique
  slug     String        @unique
  articles ArticleTag[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  excerpt     String       @db.Text
  content     String       @db.Text // MDX content
  image       String?
  published   Boolean      @default(false)
  featured    Boolean      @default(false)
  trending    Boolean      @default(false)
  views       Int          @default(0)
  categoryId  String
  authorId    String
  
  category    Category     @relation(fields: [categoryId], references: [id])
  author      User         @relation(fields: [authorId], references: [id])
  tags        ArticleTag[]
  
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([published, featured])
  @@index([published, trending])
  @@index([categoryId])
}

model ArticleTag {
  articleId String
  tagId     String
  
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
}

model Ad {
  id          String   @id @default(cuid())
  name        String
  image       String
  targetUrl   String
  sizes       String[] // e.g., ["300x250", "728x90"]
  placement   Placement
  weight      Int      @default(1)
  active      Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KeywordLink {
  id              String @id @default(cuid())
  keyword         String @unique
  affiliateUrl    String
  maxHitsPerPage  Int    @default(3)
  active          Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Placement {
  HEADER
  SIDEBAR
  INLINE
  FOOTER
} 